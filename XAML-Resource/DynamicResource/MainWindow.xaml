<!--当系统颜色改变，dynabrush1和dynabrush2这两个画刷也会跟着改变，LinearGradientBrush和SolidColorBrush这两个对象并没有被替代，它们是相同的对象-->
<!--控件Label引用这两个对象，当这些对象改变时，Label的前景和背景也会改变-->
<!--当Label中使用DynamicResource时，则Label会停止响应系统颜色的改变；DynamicResource希望重新建立一个被key所引用的对象，而此画刷中没有被重新建立，所以不会进行更新-->    
<Window x:Class="DynamicResource.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DynamicResource"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800"
        Background="{DynamicResource {x:Static SystemColors.InactiveCaptionBrushKey}}">
    <StackPanel>
        <StackPanel.Resources>
            <!--覆盖key所定义的系统颜色-->
            <!--<Color x:Key="{x:Static SystemColors.ActiveCaptionColorKey}" R="255" G="255" B="255"/>-->            
            <Color x:Key="{x:Static SystemColors.InactiveBorderColorKey}" R="255" G="255" B="0"/>

            <LinearGradientBrush x:Key="dynabrush1" StartPoint="0,0" EndPoint="1,1">
                <LinearGradientBrush.GradientStops>
                    <GradientStop Offset="0" Color="{DynamicResource {x:Static SystemColors.ActiveCaptionColorKey}}"/>
                    <GradientStop Offset="1" Color="{DynamicResource {x:Static SystemColors.InactiveBorderColorKey}}"/>
                </LinearGradientBrush.GradientStops>
            </LinearGradientBrush>

            <SolidColorBrush x:Key="dynabrush2" Color="{DynamicResource {x:Static SystemColors.ActiveCaptionColorKey}}"/>
        </StackPanel.Resources>
        
        <Label HorizontalAlignment="Center" FontSize="76" Content="Dynamic Resources"
               Background="{StaticResource dynabrush1}"
               Foreground="{StaticResource dynabrush2}"/>

    </StackPanel>
</Window>
